#!/bin/bash
# Cache regularly cloned Git repositories
# Licence: WTFPL 2.0

function error {
	local code="$1"; shift

	for message in "$@"; do echo "${message}" >&2; done
	exit "${code}"
}

function find_cache_dir {
	local cache_dir
	cache_dir=$(git config cache.directory)
	[ -d "${cache_dir}" ] || error 1 "Nonexistent cache directory, please create it with 'git cache init [DIR]'"
	echo "${cache_dir}"
}

function set_umask {
	local cache_dir="$1"; shift
	[[ $cache_dir ]] || cache_dir=$(find_cache_dir) || error 1
	is_system_cache "${cache_dir}" && umask 002
}

# https://stackoverflow.com/questions/1401002/trick-an-application-into-thinking-its-stdout-is-a-terminal-not-a-pipe#
function faketty { script -qfc "$(printf "%q " "$@")" /dev/null ; }

###############
## MANAGE CACHE

function create_cache {
	local cache_dir="$1"
	local type="$2"

	case "${type}" in
		global)
			type=system
			;;
		""|local)
			type=global
			;;
		*)
			error 1 "Cache type '${type}' not recognised."
			;;
	esac

	if [ -z "${cache_dir}" ]; then
		case "${type}" in
			global)
				cache_dir=~/.cache/git-cache
			;;
			system)
				if [ -w /var/cache ]; then
					cache_dir=/var/cache/git-cache
				fi
				if [ -w /Library/Caches ]; then
					cache_dir=/Library/Caches/git-cache
				fi
			;;
		esac
	fi

	[[ $cache_dir =~ ^/|~ ]] || cache_dir="$PWD/${cache_dir}"

	cache_dir=$(realpath "${cache_dir}")

	set_umask "${cache_dir}"
	init_cache "${cache_dir}"

	git config --${type} cache.directory "${cache_dir}"
}

function init_cache {
	local cache_dir="$1"

	[ "${cache_dir}" ] || error 1 "No cache dir supplied"
	[ -d "${cache_dir}" ] && [ -f "${cache_dir}/HEAD" ] && error 1 "Cache directory is already initialized. You can use 'git cache delete --force' to delete it." "Cache dir = '$cache_dir'"

	mkdir -p "${cache_dir}"
	(
		cd "${cache_dir}" || error 1
		git init --bare
	)

	if is_system_cache "${cache_dir}"; then
		chgrp -R users "${cache_dir}"
		chmod -R ug+rw "${cache_dir}"
	fi
}

function delete_cache {
	local cache_dir_system
	local cache_dir_global

	cache_dir_system="$(git config --system cache.directory)"
	if [ "${cache_dir_system}" ]; then
		git config --system --remove-section cache && \
		(
			rm -rf "${cache_dir_system}" && echo "System cache directory $cache_dir_system deleted." >&2
		)
	fi

	cache_dir_global="$(git config --global cache.directory)"
	if [ "${cache_dir_global}" ]; then
		git config --global --remove-section cache && \
		(
			rm -rf "${cache_dir_global}" && echo "Global user cache directory ${cache_dir_global} deleted." >&2
		)
	fi
}

function is_system_cache {
	local cache_dir="$1"
	[[ ${cache_dir} ]] || error 1 "Please supply the cache-dir to check for is_system_cache()."
	[[ ${cache_dir} == /var/* ]] && return 0
	return 1
}

######
## GEN

function update_cached_repos {
	local cache_dir
	cache_dir=$(find_cache_dir)
	(
		cd "${cache_dir}" || error 1
		git fetch --all --prune
	)
}

##########
## REMOTE

function rm_remote {
	local name="$1"
	local cache_dir
	cache_dir=$(find_cache_dir)
	[ "${name}" ] || error 1 "Please supply the remote name to be removed."

	(
		cd "${cache_dir}" || error 1
		git remote rm "$name"
	)
}

function add_remote {
	local name="$1"
	local remote="$2"
	local branch="$3"
	local cache_dir
	cache_dir=$(find_cache_dir)

	[[ "${name}" && "${remote}" ]] || error 1 "Please supply the remote name and the remote url to be added to the cache. You can also pass a branch name as third argument."

	# add_remote_via_temp_dir "$name" "$remote" "$cache_dir"

	(
		cd "${cache_dir}" || error 1
		git remote add "${name}" "${remote}"
		git fetch "${name}" "$branch"
	)
}

function add_remote_via_temp_dir {
	# Fetch new Git repository in a temporary directory for speed reasons
	local name="$1"
	local remote="$2"
	local cache_dir="$3"

	temp_dir=$(mktemp -d)
	(
		cd "${temp_dir}" || error 1
		git init --bare1
		git remote add --mirror=fetch "${name}" "${remote}"
		git fetch --all
	)

	# Copy it into the main cache directory
	(
		cd "${cache_dir}" || error 1
		git remote add --mirror=fetch "${name}" "${temp_dir}"
		git fetch --all
		git remote set-url "${name}" "${remote}"
	)

	# Clean-up
	rm -rf "${temp_dir}"
}

function find_remote_url {
	[ "$1" ] || error 1 "Please supply the remote name to find the URL for."

	remote_url=$(show_remotes |awk '$1 == name { print $2 }' name="$1")
	if [ -z "${remote_url}" ]; then
		remote_url="$1"
	fi
}

function show_remotes {
	local cache_dir
	cache_dir=$(find_cache_dir)

	(
		cd "${cache_dir}" || error 1
		git remote -v |awk '/(fetch)/ { print $1, $2 }'
	)
}

function show_help {
	cat << EOF
usage:
	git cache init [DIR] [TYPE]                          initialise the cache directory; TYPE=local|global (default: local)
	git cache delete --force                             delete the cache directory

	git cache add NAME URL                               add a cached git repository
	git cache rm --force NAME                            remove a cached git repository
	git cache show                                       show all cached git repositories
	git cache update                                     fetch all cached git repository
	git cache clone [--dependent] URL/NAME [DIR]         clone using cache
	git cache submodule add [--dependent] URL/NAME [DIR] add submodule using cache

	clone commands accept either the name of an already cached git repository or an arbitrary remote URL
	cloning remote forks will still result in a signifigant speedup, any objects found in cache will be used rather than downloaded
	--dependent will keep object alternate references to the cache, which results in less disk space, but the repository depends on the cache existence
	without the option the clone will take up more space, but it will be independent like a normal clone

	(Any other command will be applied to the cache directory.)
	 e.g. 'git cache gc' or 'git cache remote show'.)

Standard cache directory is either:
	/var/cache/git-cache  if created by root, and cache is init with TYPE='global' (then usable by every user)
	~/.cache/git-cache    else (or cache init TYPE='local')

Once created, the cache directory is written in the configuration parameter
'cache.directory', either in the system or global user configuration.
EOF
}

#######
## MAIN

command="$1"; shift
case "${command}" in
	init)
		create_cache "$1" "$2"
		exit
		;;

	help|-help|--help|-h)
		show_help
		exit
		;;
esac

# If you're using a system cache, you need to not block the others in the group:
set_umask

case "${command}" in
	delete)
		[ "$1" = "--force" ] || error 1 "Please supply the --force option to confirm you want to delete the whole cache directory."
		delete_cache
		;;

	clone)
		dissociate="--dissociate"
		if [ "$1" = "--dependent" ]; then
			dissociate=""; shift
		fi
		
		find_remote_url "$1"; shift
		cache_dir=$(find_cache_dir)
		# TODO: --dissociate is not available in older gits. Might want to detect version and use workaround
		git clone --reference "$cache_dir" $dissociate "$remote_url" "$@"
		;;
		
	submodule)
		submodule_command="$1"; shift
		
		dissociate="--dissociate"
		if [ "$1" = "--dependent" ]; then
			dissociate=""; shift
		fi
		
		find_remote_url "$1"; shift
		cache_dir=$(find_cache_dir)
		case "${submodule_command}" in
			add)
				#https://unix.stackexchange.com/questions/97920/how-to-cd-automatically-after-git-clone
				git_out=$(mktemp)
				# Using faketty since git wants to be more quiet when it detects a pipe redirect. clone has a '--progress' option to ignore this, but yet again the option is missing for submodule
				faketty git submodule add --reference "${cache_dir}" "${remote_url}" "$@" 2>&1 | tee "${git_out}"
				repo_name=$(awk -F\' '/Cloning into/ {print $2}' "${git_out}")
				rm "${git_out}"
				
				# Even as of git 2.16.3, git is oddly missing --dissociate for submodule use. Have to use a workaround.
				if [ ! -z "${dissociate}" ]; then
					cd "${repo_name}" || error 1
					git repack -a
					git_folder=$(cut -d ' ' -f 2 .git)
					rm "${git_folder}/objects/info/alternates"
				fi
			;;
			# TODO: Support "submodule update"
		esac
		;;

	fetch|update)
		update_cached_repos
		;;

	show)
		show_remotes
		;;

	rm|del|delete)
		[ "$1" = "--force" ] || error 1 "Please supply the --force option to confirm you want to delete this Git repository from the cache directory."
		rm_remote "$2"
		;;

	add)
		add_remote "$1" "$2" "$3"
		;;

	*)
		# Default trigger to directly act on the cache directory
		(
			cd "$(find_cache_dir)" || error 1
			case "${command}" in
				"")
					$0 show
					;;
				*)
					git "${command}" "$@"
					;;
			esac
		)
		;;
esac
